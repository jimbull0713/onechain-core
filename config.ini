# Endpoint for P2P node to listen on
# p2p-endpoint = 
p2p-endpoint = 0.0.0.0:21103

# P2P nodes to connect to on startup (may specify multiple times)
# seed-node = 

seed-node = oneseednode1.fensibi.com:21103
seed-node = oneseednode1.btsone.com:21103
seed-node = oneseednode1.btsbay.com:21103
seed-node = oneseednode1.dabiquan.com:21103
seed-node = oneseednode1.coinone.one:21103
seed-node = oneseednode1.onewallet.one:21103
seed-node = oneseednode1.walletone.one:21103
seed-node = oneseednode1.bitchat.one:21103
seed-node = oneseednode1.oneshare.one:21103
seed-node = oneseednode1.onemessage.one:21103

# JSON array of P2P nodes to connect to on startup
# seed-nodes = 
seed-nodes = ["oneseednode1.fensibi.com:21103","oneseednode1.btsone.com:21103","oneseednode1.btsbay.com:21103","oneseednode1.dabiquan.com:21103","oneseednode1.coinone.one:21103","oneseednode1.onewallet.one:21103","oneseednode1.walletone.one:21103","oneseednode1.bitchat.one:21103","oneseednode1.oneshare.one:21103","oneseednode1.onemessage.one:21103"]

# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.
# checkpoint = 

# Endpoint for websocket RPC to listen on
# rpc-endpoint = 
rpc-endpoint = 0.0.0.0:21203

# Endpoint for TLS websocket RPC to listen on
# rpc-tls-endpoint = 

# The TLS certior this server
# server-pem = 

# Password for this ceficate file frtificate
# server-pem-password = 

# File to read Genesis State from
# genesis-json = 
genesis-json = genesis.json

# Block signing key to use for init witnesses, overrides genesis file
# dbg-init-key = 

# JSON file specifying API permissions
# api-access = 

# Enable block production, even if the chain is stale.
enable-stale-production = false

# Percent of witnesses (0-99) that must be participating in order to produce blocks
required-participation = true

# ID of witness controlled by this node (e.g. "1.6.5", quotes are required, may specify multiple times)
# witness-id = 


# Tuple of [PublicKey, WIF private key] (may specify multiple times)

# Account ID to track history for (may specify multiple times)
# track-account = 

# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers
bucket-size = [15,60,300,3600,86400]

# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)
history-per-size = 1000

# declare an appender named "stderr" that writes messages to the console
[log.console_appender.stderr]
stream=std_error

# declare an appender named "p2p" that writes messages to p2p.log
[log.file_appender.p2p]
filename=logs/p2p/p2p.log
# filename can be absolute or relative to this config file

# route any messages logged to the default logger to the "stderr" logger we
# declared above, if they are info level are higher
[logger.default]
level=info
appenders=stderr

# route messages sent to the "p2p" logger to the p2p appender declared above
[logger.p2p]
level=info
appenders=p2p

max-ops-per-account = 200
partial-operations = true


